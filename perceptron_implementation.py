# -*- coding: utf-8 -*-
"""Perceptron_Implementation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sBS4ubb-KjAd3UYSM0OfcYc6t-bkK1-t

The following code is an implementation the perceptron to resolve a problem of binary clasification.

First we start creating a class called Perceptron that contain our algorithm, here we define the init that start the peceptron, the we define the fit, where we will charge our data to train the model and also we define predict as the method to do the predictions
"""

import numpy as np

class Perceptron:
    def __init__(self, learning_rate=0.01, n_iterations=1000):
        self.learning_rate = learning_rate
        self.n_iterations = n_iterations
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        for _ in range(self.n_iterations):
            for i in range(n_samples):
                prediction = np.dot(X[i], self.weights) + self.bias
                if y[i] * prediction <= 0:
                    self.weights += self.learning_rate * y[i] * X[i]
                    self.bias += self.learning_rate * y[i]

    def predict(self, X):
        return np.sign(np.dot(X, self.weights) + self.bias)

"""Here we are going to do a proof of the model"""

if __name__ == "__main__":
    # Datos de ejemplo
    X = np.array([[2, 3], [1, 4], [5, 6], [3, 8]])
    y = np.array([1, 1, -1, -1])

"""We creat the perceptron and fit the model"""

perceptron = Perceptron(learning_rate=0.1, n_iterations=1000)
perceptron.fit(X, y)

"""Here we are going to do the test of our model"""

X_test = np.array([[4, 5], [2, 6]])
predictions = perceptron.predict(X_test)
print("Predicciones:", predictions)